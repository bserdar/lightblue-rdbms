{
    "copyright": [
        "Copyright 2013 Red Hat, Inc. and/or its affiliates.",
        "This file is part of lightblue.",
        "This program is free software: you can redistribute it and/or modify",
        "it under the terms of the GNU General Public License as published by",
        "the Free Software Foundation, either version 3 of the License, or",
        "(at your option) any later version.",
        "This program is distributed in the hope that it will be useful,",
        "but WITHOUT ANY WARRANTY; without even the implied warranty of",
        "MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
        "GNU General Public License for more details.",
        "You should have received a copy of the GNU General Public License",
        "along with this program.  If not, see <http://www.gnu.org/licenses/>."],

  "$schema": "http://json-schema.org/draft-04/schema#",
  "type": "object",
  "id": "insert",
  "properties": {
    "bindings": {
      "type": "object",
      "properties": {
        "in": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "column": {
                "type": "string"
              },
              "path": {
                "type": "string"
              }
            }
          }
        },
        "out": {
          "$ref": "#/properties/insert/bindings/in"
        }
      }
    },
    "expressions": {
      "type": "array",
      "minItems": 1,
      "items": {
        "oneOf": [{
          "type": "object",
          "id": "statement",
          "properties": {
            "datasource": {
              "type": "string",
              "id": "datasource"
            },
            "sql": {
              "type": "string",
              "id": "sql"
            },
            "type": {
              "id": "type",
              "enum": ["select", "insert", "update", "delete", "call"]
            }
          }
        }, {
          "type": "object",
          "properties": {
            "if": {
              "type": "object",
              "properties": {
                "oneOf": [{
                    "$ref": "conditional.json#/properties/$or"
                  }, {
                    "$ref": "conditional.json#/properties/$any"
                  }, {
                    "$ref": "conditional.json#/properties/$and"
                  }, {
                    "$ref": "conditional.json#/properties/$all"
                  }, {
                    "$ref": "conditional.json#/properties/$not"
                  }, {
                    "$ref": "conditional.json#/properties/path-empty.json"
                  }, {
                    "$ref": "conditional.json#/properties/path-check-path.json"
                  }, {
                    "$ref": "conditional.json#/properties/path-check-value.json"
                  }, {
                    "$ref": "conditional.json#/properties/path-check-values.json"
                  }, {
                    "$ref": "conditional.json#/properties/path-regex.json"
                  }
                ]
              }
            },
            "then": {
              "oneOf": [{
                "$ref": "construct.json#expressions"
              }, {
                "enum": ["$fail", "$continue", "$break"]
              }]
            },
            "elseIf": {
              "type": "array",
              "items": {
                "allOf": [{
                  "$ref": "#properties/if"
                }, {
                  "$ref": "#properties/then"
                }]
              }
            },
            "else": {
              "oneOf": [{
                "$ref": "construct.json#expressions"
              }, {
                "enum": ["$fail", "$continue", "$break"]
              }]
            }
          }
        }, {
          "type": "object",
          "properties": {
            "$foreach": {
              "properties": {
                "iterateOverPath": {
                  "type": "string"
                },
                "expressions": {
                  "$ref": "construct.json#expressions"
                }
              }
            }
          }
        }, {
          "type": "object",
          "properties": {
            "$foreach": {
              "properties": {
                "loopTimes": {
                  "type": "number"
                },
                "loopVariable": {
                  "type": "string"
                },
                "expressions": {
                  "$ref": "construct.json#expressions"
                }
              }
            }
          }
        }]
      }
    }
  },
    "required": [
        "bindings",
        "expressions"
    ],
    "additionalProperties": false
}